// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  User User[]
}

model User {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  matNr               Int            @unique
  email               String         @unique
  password            String
  name                String
  role                Role           @relation(fields: [roleName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  roleName            String         @default("student")
  schnitzelJagd       Schnitzeljagd?
  joinedSchnitzelJagd Schnitzeljagd? @relation("joined", fields: [joined], references: [password], onDelete: NoAction, onUpdate: NoAction)
  joined              String?
}

model Schnitzeljagd {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  password    String    @unique
  groupSize   Int
  owner       User      @relation(fields: [ownerId], references: [matNr])
  ownerId     Int       @unique
  station     Station[]
  joinedUsers User[]    @relation("joined")
}

model Station {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  location        String
  game            Game?
  qrCode          String
  clue            String
  endText         String
  schnitzelJagd   Schnitzeljagd @relation(fields: [schnitzelJagdId], references: [id])
  schnitzelJagdId String        @db.ObjectId
}

model Game {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  rules     String
  Station   Station? @relation(fields: [stationId], references: [id])
  stationId String?  @unique @db.ObjectId
}
